Input:
<method>
     Path2D.Double pointsToPath(Point2D[] points)
</method>
<TestCases>
    // #1.  Point2D[] {} -> Path2D.Double(new Polygon(new int[] {0}, new int[] {0}, 1))
    // #2.  Point2D[] {new Point2D.Double(1, 0)} -> Path2D.Double(new Polygon(new int[] {0, 1}, new int[] {0, 0}, 2))
    // #3.  Point2D[] {new Point2D.Double(0, 1)} -> Path2D.Double(new Polygon(new int[] {0, 0}, new int[] {0, 1}, 2))
    // #4.  Point2D[] {new Point2D.Double(1, 1)} -> Path2D.Double(new Polygon(new int[] {0, 1}, new int[] {0, 1}, 2))
    // #5.  Point2D[] {new Point2D.Double(123, 0)} -> Path2D.Double(new Polygon(new int[] {0, 123}, new int[] {0, 0}, 2))
    // #6.  Point2D[] {new Point2D.Double(0, 456)} -> Path2D.Double(new Polygon(new int[] {0, 0}, new int[] {0, 456}, 2))
    // #7.  Point2D[] {new Point2D.Double(123, 456)} -> Path2D.Double(new Polygon(new int[] {0, 123}, new int[] {0, 456}, 2))
    // #8.  Point2D[] {new Point2D.Double(1.2, 0.0), new Point2D.Double(1.2, 3.4), new Point2D.Double(0.0, 3.4), new Point2D.Double()} -> Path2D.Double(new Rectangle2D.Double(0, 0, 1.2, 3.4))
</TestCases>

Output:
public Path2D.Double pointsToPath(Point2D[] points) {
    Path2D.Double path = new Path2D.Double();
    path.moveTo(0, 0);

    if (points.length == 0) {
        path.lineTo(0, 0);
        return path;
    }

    for (Point2D p: points) {
        path.lineTo(p.getX(), p.getY());
    }
    path.closePath();
    return path;
}