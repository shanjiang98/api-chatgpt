Input:
<method>
   void guavaSortDescending(int[] array, int fromIndex, int toIndex)
</method>
<TestCases>
    // #1.  int[] {}, 0, 0 -> array = new int[] {}
    // #2.  int[] {1}, 0, 1 -> array = new int[] {1}
    // #3.  int[] {-1, -2, 1, 2}, 1, 3 -> array = new int[] {-1, 1, -2, 2}
    // #4.  int[] {1, 2, 3, 44, 55, 66, 777, 888}, 3, 7 -> array = new int[] {1, 2, 3, 777, 66, 55, 44, 888}
    // #5.  int[] {2, 888, 55, 1, 3, 777, 44, 66}, 4, 8 -> array = new int[] {2, 888, 55, 1, 777, 66, 44, 3}
    // #6.  int[] {2, 888, 55, 1, 3, 777, 44, 66}, 2, 7 -> array = new int[] {2, 888, 777, 55, 44, 3, 1, 66}
</TestCases>

Output:
// Step 5: Implement the Method to Pass All Test Cases
public static void guavaSortDescending(int[] array, int fromIndex, int toIndex) {
    if (array == null || fromIndex < 0 || toIndex > array.length || fromIndex >= toIndex) {
        return; // handle invalid indexes
    }

    // Step 6: Convert the subarray to Integer array for sorting
    Integer[] subArray = new Integer[toIndex - fromIndex];
    for (int i = fromIndex; i < toIndex; i++) {
        subArray[i - fromIndex] = array[i];
    }

    // Sort the subarray in descending order using Collections
    Arrays.sort(subArray, Collections.reverseOrder());

    // Copy sorted elements back to original array
    for (int i = fromIndex; i < toIndex; i++) {
        array[i] = subArray[i - fromIndex];
    }
}