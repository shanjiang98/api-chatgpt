Input:
<method>
	Queue<int> reverseFirstK(Queue<int> queue, int k)
</method>
<TestCases>
	// #1. ([1, 2, 3], 3) -> [3, 2, 1]
    // #2. ([1, 2, 3, 4, 5, 6], 2) -> [2, 1, 3, 4, 5, 6]
    // #3. ([1, 2, 3, 4], 1) -> [1, 2, 3, 4]
    // #4. ([10 , 20, 30, 40, 50, 60], 8) -> [60, 50, 40, 30, 20, 10]
</TestCases>

Output:
Queue < Integer > reverseFirstK(Queue < Integer > queue, int k) {
    // If the queue is empty or k is less than or equal to 1, return the queue as is
    if (queue.isEmpty() || k <= 1) {
        return queue;
    }

    Stack < Integer > stack = new Stack < > ();
    Queue < Integer > resultQueue = new LinkedList < > ();

    // Reverse the first 'k' elements
    for (int i = 0; i < k && !queue.isEmpty(); i++) {
        stack.push(queue.poll());
    }

    // Add the reversed elements back to the queue
    while (!stack.isEmpty()) {
        resultQueue.add(stack.pop());
    }

    // Add the remaining elements as they are
    while (!queue.isEmpty()) {
        resultQueue.add(queue.poll());
    }

    return resultQueue;
}