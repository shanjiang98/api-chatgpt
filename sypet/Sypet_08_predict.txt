Input:
<method>
	double predict(double[][] data, double x)
</method>
<TestCases>
	// #1. ({1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}}, 1.5) -> 2.5
	// #2. ({1, 3}, {2, 4}, {3, 5}, {4, 6}, {5, 7}}, 2.5) -> 4.5
</TestCases>

Output:
/**
 * This method predicts the y value for a given x value based on simple linear regression.
 * @param data 2D array where each row is a data point with [x, y].
 * @param x The x value for which we want to predict the y value.
 * @return The predicted y value.
 */
double predict(double[][] data, double x) {
    // Calculate means of x and y
    double sumX = 0, sumY = 0;
    for (double[] point: data) {
        sumX += point[0];
        sumY += point[1];
    }
    double meanX = sumX / data.length;
    double meanY = sumY / data.length;

    // Calculate the slope (b1) and intercept (b0)
    double numerator = 0, denominator = 0;
    for (double[] point: data) {
        numerator += (point[0] - meanX) * (point[1] - meanY);
        denominator += Math.pow(point[0] - meanX, 2);
    }
    double b1 = numerator / denominator;
    double b0 = meanY - b1 * meanX;

    // Predict the y value for given x using the regression line equation
    return b0 + b1 * x;
}